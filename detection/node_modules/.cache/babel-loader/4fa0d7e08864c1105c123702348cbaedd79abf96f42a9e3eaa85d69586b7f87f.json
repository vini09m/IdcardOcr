{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91635\\\\Desktop\\\\PythonEvn\\\\env\\\\detection\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [extractedText, setExtractedText] = useState('');\n  const [jsonData, setJsonData] = useState(null);\n  const [ocrData, setOcrData] = useState([]);\n  useEffect(() => {\n    // Fetch OCR data when the component mounts\n    fetchOcrData();\n  }, []);\n  const handleFileChange = e => {\n    setSelectedFile(e.target.files[0]);\n  };\n  const handleUpload = () => {\n    if (!selectedFile) return;\n    const formData = new FormData();\n    formData.append('image', selectedFile);\n    axios.post('http://localhost:5000/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(response => {\n      setExtractedText(response.data.text);\n      const lines = response.data.text.split('\\n');\n      const parsedData = parseExtractedText(lines);\n      setJsonData(parsedData);\n\n      // Send the JSON data string to the server\n      axios.post('http://localhost:5000/uploadJson', {\n        jsonData: JSON.stringify(parsedData, null, 2)\n      }).then(serverResponse => {\n        console.log(serverResponse.data.message);\n\n        // Fetch updated OCR data after upload\n        fetchOcrData();\n      }).catch(error => console.error(error));\n    }).catch(error => console.error(error));\n  };\n  const parseExtractedText = lines => {\n    const jsonData = {\n      identification_number: extractValue(lines, /\\b(\\d{1,4}\\s*){5,}\\d{1,4}\\b/),\n      name: extractValue(lines, /Name\\s*([\\s\\n]*[A-Za-z]+\\s[A-Za-z]+)/, 'Name'),\n      last_name: extractValue(lines, /Last [nN]ame\\s*([\\s\\n]*[A-Za-z]+)/, 'Last name'),\n      date_of_birth: extractValue(lines, /\\d{1,2}\\s[A-Za-z]+\\s\\d{4}/, 'Date of Birth'),\n      date_of_issue: extractDate(lines, 'Date of Issue'),\n      date_of_expiry: extractDate(lines, 'Date of Expiry')\n    };\n    if (!jsonData.last_name) {\n      jsonData.last_name = extractDate(lines, 'Last Name');\n    }\n    if (!jsonData.name) {\n      jsonData.name = extractLineBelow(lines, 'Name');\n      console.log('Name field is empty.');\n    }\n    return jsonData;\n  };\n  const extractDate = (lines, keyword) => {\n    for (let i = 1; i < lines.length; i++) {\n      if (lines[i].includes(keyword)) {\n        return lines[i - 1].trim(); // Return the line above the \"Date of Issue\"\n      }\n    }\n    return '';\n  };\n  const extractLineBelow = (lines, keyword) => {\n    for (let i = 0; i < lines.length - 1; i++) {\n      if (lines[i].includes(keyword)) {\n        return lines[i + 1].trim(); // Return the line below the keyword\n      }\n    }\n    return '';\n  };\n  const extractValue = (lines, regex, removeWord) => {\n    const line = lines.find(line => regex.test(line));\n    if (line) {\n      const value = line.replace(removeWord, '').trim();\n      return value;\n    }\n    return \"\";\n  };\n  const fetchOcrData = () => {\n    // Fetch OCR data from the server\n    axios.get('http://localhost:5000/ocrData').then(response => {\n      setOcrData(response.data);\n    }).catch(error => console.error(error));\n  };\n  const handleCreate = () => {\n    // Prompt the user for OCR data\n    const identificationNumber = prompt('Enter Identification Number:');\n    const name = prompt('Enter Name:');\n    const lastName = prompt('Enter Last Name:');\n    const dateOfBirth = prompt('Enter Date of Birth:');\n    const dateOfIssue = prompt('Enter Date of Issue:');\n    const dateOfExpiry = prompt('Enter Date of Expiry:');\n\n    // Check if the user clicked Cancel or entered empty values\n    if (identificationNumber === null || name === null || lastName === null || dateOfBirth === null || dateOfIssue === null || dateOfExpiry === null) {\n      // User canceled or entered empty values\n      return;\n    }\n\n    // Create a new OCR data object\n    const newOcrData = {\n      identification_number: identificationNumber,\n      name: name,\n      last_name: lastName,\n      date_of_birth: dateOfBirth,\n      date_of_issue: dateOfIssue,\n      date_of_expiry: dateOfExpiry\n    };\n\n    // Send the new OCR data to the server\n    axios.post('http://localhost:5000/ocrData', newOcrData).then(response => {\n      console.log(response.data.message);\n      // Fetch updated OCR data after creating a new entry\n      fetchOcrData();\n    }).catch(error => console.error(error));\n  };\n  const handleUpdate = id => {\n    // Find the OCR data by ID\n    const dataToUpdate = ocrData.find(data => data._id === id);\n\n    // Prompt the user for updated values\n    const updatedIdentificationNumber = prompt('Enter updated Identification Number:', dataToUpdate.identification_number);\n    const updatedName = prompt('Enter updated Name:', dataToUpdate.name);\n    const updatedLastName = prompt('Enter updated Last Name:', dataToUpdate.last_name);\n    const updatedDateOfBirth = prompt('Enter updated Date of Birth:', dataToUpdate.date_of_birth);\n    const updatedDateOfIssue = prompt('Enter updated Date of Issue:', dataToUpdate.date_of_issue);\n    const updatedDateOfExpiry = prompt('Enter updated Date of Expiry:', dataToUpdate.date_of_expiry);\n\n    // Check if the user clicked Cancel or entered empty values\n    if (updatedIdentificationNumber === null || updatedName === null || updatedLastName === null || updatedDateOfBirth === null || updatedDateOfIssue === null || updatedDateOfExpiry === null) {\n      // User canceled or entered empty values\n      return;\n    }\n\n    // Example: Update identification number, name, last name, date of birth, date of issue, date of expiry\n    const updatedData = {\n      ...dataToUpdate,\n      identification_number: updatedIdentificationNumber,\n      name: updatedName,\n      last_name: updatedLastName,\n      date_of_birth: updatedDateOfBirth,\n      date_of_issue: updatedDateOfIssue,\n      date_of_expiry: updatedDateOfExpiry\n    };\n\n    // Send the updated data to the server\n    axios.put(`http://localhost:5000/ocrData/${id}`, updatedData).then(response => {\n      console.log(response.data.message);\n      // Fetch updated OCR data after update\n      fetchOcrData();\n    }).catch(error => console.error(error));\n  };\n  const handleDelete = id => {\n    // Confirm the deletion with the user\n    const confirmDeletion = window.confirm('Are you sure you want to delete this data?');\n    if (confirmDeletion) {\n      // Send a request to delete the data by ID\n      axios.delete(`http://localhost:5000/ocrData/${id}`).then(response => {\n        console.log(response.data.message);\n        // Fetch updated OCR data after deletion\n        fetchOcrData();\n      }).catch(error => console.error(error));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Vision API OCR\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload and Process\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreate,\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Extracted Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: extractedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"JSON Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(jsonData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"History:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: ocrData.map(data => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [`ID: ${data._id}, Identification Number: ${data.identification_number}, Name: ${data.name}, Last Name: ${data.last_name}, Date of Birth: ${data.date_of_birth}, Date of Issue: ${data.date_of_issue} Date of Expiry: ${data.date_of_expiry}`, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleUpdate(data._id),\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDelete(data._id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this)]\n        }, data._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"RR8yEs/TdJ2Zpnd9qnBFIKcVghI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","extractedText","setExtractedText","jsonData","setJsonData","ocrData","setOcrData","fetchOcrData","handleFileChange","e","target","files","handleUpload","formData","FormData","append","post","headers","then","response","data","text","lines","split","parsedData","parseExtractedText","JSON","stringify","serverResponse","console","log","message","catch","error","identification_number","extractValue","name","last_name","date_of_birth","date_of_issue","extractDate","date_of_expiry","extractLineBelow","keyword","i","length","includes","trim","regex","removeWord","line","find","test","value","replace","get","handleCreate","identificationNumber","prompt","lastName","dateOfBirth","dateOfIssue","dateOfExpiry","newOcrData","handleUpdate","id","dataToUpdate","_id","updatedIdentificationNumber","updatedName","updatedLastName","updatedDateOfBirth","updatedDateOfIssue","updatedDateOfExpiry","updatedData","put","handleDelete","confirmDeletion","window","confirm","delete","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","map","_c","$RefreshReg$"],"sources":["C:/Users/91635/Desktop/PythonEvn/env/detection/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst App = () => {\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [extractedText, setExtractedText] = useState('');\n    const [jsonData, setJsonData] = useState(null);\n    const [ocrData, setOcrData] = useState([]);\n\n    useEffect(() => {\n        // Fetch OCR data when the component mounts\n        fetchOcrData();\n    }, []);\n\n    const handleFileChange = (e) => {\n        setSelectedFile(e.target.files[0]);\n    };\n\n    const handleUpload = () => {\n        if (!selectedFile) return;\n\n        const formData = new FormData();\n        formData.append('image', selectedFile);\n\n        axios.post('http://localhost:5000/upload', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        })\n            .then(response => {\n                setExtractedText(response.data.text);\n                const lines = response.data.text.split('\\n');\n                const parsedData = parseExtractedText(lines);\n                setJsonData(parsedData);\n\n                // Send the JSON data string to the server\n                axios.post('http://localhost:5000/uploadJson', { jsonData: JSON.stringify(parsedData, null, 2) })\n                    .then(serverResponse => {\n                        console.log(serverResponse.data.message);\n\n                        // Fetch updated OCR data after upload\n                        fetchOcrData();\n                    })\n                    .catch(error => console.error(error));\n            })\n            .catch(error => console.error(error));\n    };\n\n    const parseExtractedText = (lines) => {\n        const jsonData = {\n            identification_number: extractValue(lines, /\\b(\\d{1,4}\\s*){5,}\\d{1,4}\\b/),\n            name: extractValue(lines, /Name\\s*([\\s\\n]*[A-Za-z]+\\s[A-Za-z]+)/, 'Name'),\n            last_name: extractValue(lines, /Last [nN]ame\\s*([\\s\\n]*[A-Za-z]+)/, 'Last name'),\n            date_of_birth: extractValue(lines, /\\d{1,2}\\s[A-Za-z]+\\s\\d{4}/, 'Date of Birth'),\n            date_of_issue: extractDate(lines, 'Date of Issue'),\n            date_of_expiry: extractDate(lines, 'Date of Expiry'),\n        };\n        \n        if (!jsonData.last_name) {\n          jsonData.last_name=extractDate(lines, 'Last Name');\n          \n        }\n\n        if (!jsonData.name) {\n          jsonData.name=extractLineBelow(lines, 'Name');\n          console.log('Name field is empty.');\n        }\n        return jsonData;\n    };\n\n    const extractDate = (lines, keyword) => {\n        for (let i = 1; i < lines.length; i++) {\n            if (lines[i].includes(keyword)) {\n                return lines[i - 1].trim(); // Return the line above the \"Date of Issue\"\n            }\n        }\n        return '';\n    };\n\n    const extractLineBelow = (lines, keyword) => {\n      for (let i = 0; i < lines.length - 1; i++) {\n          if (lines[i].includes(keyword)) {\n              return lines[i + 1].trim(); // Return the line below the keyword\n          }\n      }\n      return '';\n  };\n  \n\n    const extractValue = (lines, regex, removeWord) => {\n        const line = lines.find((line) => regex.test(line));\n        if (line) {\n            const value = line.replace(removeWord, '').trim();\n            return value;\n        }\n        return \"\";\n    };\n\n    const fetchOcrData = () => {\n        // Fetch OCR data from the server\n        axios.get('http://localhost:5000/ocrData')\n            .then(response => {\n                setOcrData(response.data);\n            })\n            .catch(error => console.error(error));\n    };\n    const handleCreate = () => {\n      // Prompt the user for OCR data\n      const identificationNumber = prompt('Enter Identification Number:');\n      const name = prompt('Enter Name:');\n      const lastName = prompt('Enter Last Name:');\n      const dateOfBirth = prompt('Enter Date of Birth:');\n      const dateOfIssue = prompt('Enter Date of Issue:');\n      const dateOfExpiry = prompt('Enter Date of Expiry:');\n  \n      // Check if the user clicked Cancel or entered empty values\n      if (\n          identificationNumber === null ||\n          name === null ||\n          lastName === null ||\n          dateOfBirth === null ||\n          dateOfIssue === null ||\n          dateOfExpiry === null\n      ) {\n          // User canceled or entered empty values\n          return;\n      }\n  \n      // Create a new OCR data object\n      const newOcrData = {\n          identification_number: identificationNumber,\n          name: name,\n          last_name: lastName,\n          date_of_birth: dateOfBirth,\n          date_of_issue: dateOfIssue,\n          date_of_expiry: dateOfExpiry,\n      };\n  \n      // Send the new OCR data to the server\n      axios.post('http://localhost:5000/ocrData', newOcrData)\n          .then(response => {\n              console.log(response.data.message);\n              // Fetch updated OCR data after creating a new entry\n              fetchOcrData();\n          })\n          .catch(error => console.error(error));\n  };\n  \n\n    const handleUpdate = (id) => {\n      // Find the OCR data by ID\n      const dataToUpdate = ocrData.find(data => data._id === id);\n  \n      // Prompt the user for updated values\n      const updatedIdentificationNumber = prompt('Enter updated Identification Number:', dataToUpdate.identification_number);\n      const updatedName = prompt('Enter updated Name:', dataToUpdate.name);\n      const updatedLastName = prompt('Enter updated Last Name:', dataToUpdate.last_name);\n      const updatedDateOfBirth = prompt('Enter updated Date of Birth:', dataToUpdate.date_of_birth);\n      const updatedDateOfIssue = prompt('Enter updated Date of Issue:', dataToUpdate.date_of_issue);\n      const updatedDateOfExpiry = prompt('Enter updated Date of Expiry:', dataToUpdate.date_of_expiry);\n  \n      // Check if the user clicked Cancel or entered empty values\n      if (\n          updatedIdentificationNumber === null ||\n          updatedName === null ||\n          updatedLastName === null ||\n          updatedDateOfBirth === null ||\n          updatedDateOfIssue === null ||\n          updatedDateOfExpiry === null\n      ) {\n          // User canceled or entered empty values\n          return;\n      }\n  \n      // Example: Update identification number, name, last name, date of birth, date of issue, date of expiry\n      const updatedData = {\n          ...dataToUpdate,\n          identification_number: updatedIdentificationNumber,\n          name: updatedName,\n          last_name: updatedLastName,\n          date_of_birth: updatedDateOfBirth,\n          date_of_issue: updatedDateOfIssue,\n          date_of_expiry: updatedDateOfExpiry,\n      };\n  \n      // Send the updated data to the server\n      axios.put(`http://localhost:5000/ocrData/${id}`, updatedData)\n          .then(response => {\n              console.log(response.data.message);\n              // Fetch updated OCR data after update\n              fetchOcrData();\n          })\n          .catch(error => console.error(error));\n  };\n  \n  \n\n    const handleDelete = (id) => {\n      // Confirm the deletion with the user\n      const confirmDeletion = window.confirm('Are you sure you want to delete this data?');\n\n      if (confirmDeletion) {\n          // Send a request to delete the data by ID\n          axios.delete(`http://localhost:5000/ocrData/${id}`)\n              .then(response => {\n                  console.log(response.data.message);\n                  // Fetch updated OCR data after deletion\n                  fetchOcrData();\n              })\n              .catch(error => console.error(error));\n      }\n  };\n\n\n  return (\n    <div>\n        <h1>Vision API OCR</h1>\n        <input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\n        <button onClick={handleUpload}>Upload and Process</button>\n        <button onClick={handleCreate}>Create</button>\n        <div>\n            <h2>Extracted Text:</h2>\n            <pre>{extractedText}</pre>\n            <h2>JSON Data:</h2>\n            <pre>{JSON.stringify(jsonData, null, 2)}</pre>\n            <h2>History:</h2>\n            <ul>\n                {ocrData.map(data => (\n                    <li key={data._id}>\n                        {`ID: ${data._id}, Identification Number: ${data.identification_number}, Name: ${data.name}, Last Name: ${data.last_name}, Date of Birth: ${data.date_of_birth}, Date of Issue: ${data.date_of_issue} Date of Expiry: ${data.date_of_expiry}`}\n                        <button onClick={() => handleUpdate(data._id)}>Update</button>\n                        <button onClick={() => handleDelete(data._id)}>Delete</button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    </div>\n);\n};\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}